import sys
import math

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

def is_opponent_in_front(x,y, next_checkpoint_x, next_checkpoint_y, opponent_x, opponent_y):
    opponent_dist = abs(next_checkpoint_x - opponent_x) + abs(next_checkpoint_y - opponent_y)
    my_dist = abs(next_checkpoint_x - x) + abs(next_checkpoint_y - y)
    return my_dist < opponent_dist


def speed_by_distance(dist, angle):
    thrust = 100
    
    if angle < 90 and angle > -90 and dist > 4000:
        thrust = "BOOST"
    elif angle > 130 or angle < -130:
        thrust = 10
    elif angle > 90 or angle < -90:
        thrust = 20
    elif dist > 1500:
        thrust = 99
    else:
        thrust = round(0.06 * dist + 9)
    return thrust


def rotate(thrust, angle):
    if angle > 90 or angle < -90:
        thrust = 10    
    return thrust


previous_checkpoint_dist = 999999
previous_checkpoint_angle = 180

start = True

# game loop
while True:
    # next_checkpoint_x: x position of the next check point
    # next_checkpoint_y: y position of the next check point
    # next_checkpoint_dist: distance to the next checkpoint
    # next_checkpoint_angle: angle between your pod orientation and the direction of the next checkpoint
    x, y, next_checkpoint_x, next_checkpoint_y, next_checkpoint_dist, next_checkpoint_angle = [int(i) for i in input().split()]
    opponent_x, opponent_y = [int(i) for i in input().split()]

    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr)
    
    thrust = 100
    thrust = speed_by_distance(next_checkpoint_dist, next_checkpoint_angle)
    #if previous_checkpoint_dist < next_checkpoint_dist \
    #    and (next_checkpoint_angle > 70 or next_checkpoint_angle < -70) \
    #    and thrust != "BOOST":
    #    # Accelerate progressively
    #    thrust = round(thrust/2)
    
    print("Angle: " + str(next_checkpoint_angle) + ", Distance: " + str(next_checkpoint_dist), file=sys.stderr)
    if next_checkpoint_angle > 25 or next_checkpoint_angle < -25 \
        and next_checkpoint_dist < 5000:
        thrust = 20
    
    if abs(previous_checkpoint_angle) < abs(next_checkpoint_angle) \
        and previous_checkpoint_dist > next_checkpoint_dist \
        and thrust != "BOOST" \
        and thrust >= 50:
            print("TOTO ", file=sys.stderr)
            thrust = max(thrust - 10, thrust/2, 0)
       
       
    # For next round     
    previous_checkpoint_angle = next_checkpoint_angle
    previous_checkpoint_dist = next_checkpoint_dist
    
    # TODO: probably need to be better each turn
    # create table to stored checkpoints ?
    
    # TODO:
    #if next_checkpoint_angle > 130 or next_checkpoint_angle < -130:
    #    thrust = 8
    #elif next_checkpoint_angle > 90 or next_checkpoint_angle < -90:
    #    thrust = 20
    #else:
    #    if next_checkpoint_dist < 900 and next_checkpoint_dist >= 350:
    #        thrust = 70
    #    elif next_checkpoint_dist < 350:
    #        thrust = 10
    #    elif next_checkpoint_dist > 1600:
    #        thrust = "BOOST"
    #    else:
    #        thrust = 100
    
    #  ACTUALLY THAT'S NOT THAT GOOD
    if start:
        print(str(next_checkpoint_x) + " " + str(next_checkpoint_y) + " " + str(1))
        start = False
    else:
        print(str(next_checkpoint_x) + " " + str(next_checkpoint_y) + " " + str(thrust))
    
   #if start:
#        print(str(opponent_x) + " " + str(opponent_y) + " BOOST")
#        start = False
#    else:
        # You have to output the target position
        # followed by the power (0 <= thrust <= 100)
        # i.e.: "x y thrust"
        #print(str(next_checkpoint_x) + " " + str(next_checkpoint_y) + " " + str(thrust))
