import sys
import math

# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

def is_opponent_in_front(x,y, next_checkpoint_x, next_checkpoint_y, opponent_x, opponent_y):
    opponent_dist = abs(next_checkpoint_x - opponent_x) + abs(next_checkpoint_y - opponent_y)
    my_dist = abs(next_checkpoint_x - x) + abs(next_checkpoint_y - y)
    return my_dist < opponent_dist


start = True

# game loop
while True:
    # next_checkpoint_x: x position of the next check point
    # next_checkpoint_y: y position of the next check point
    # next_checkpoint_dist: distance to the next checkpoint
    # next_checkpoint_angle: angle between your pod orientation and the direction of the next checkpoint
    x, y, next_checkpoint_x, next_checkpoint_y, next_checkpoint_dist, next_checkpoint_angle = [int(i) for i in input().split()]
    opponent_x, opponent_y = [int(i) for i in input().split()]

    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr)
    thrust = 100
    if next_checkpoint_angle > 90 or next_checkpoint_angle < -90:
        thrust = 20
    else:
        if next_checkpoint_dist < 600:
            thrust = 70
        elif next_checkpoint_dist > 1200:
            thrust = "BOOST"
        else:
            thrust = 100
    
    if start:
        print(str(opponent_x) + " " + str(opponent_y) + " BOOST")
        start = False
    else:
        # You have to output the target position
        # followed by the power (0 <= thrust <= 100)
        # i.e.: "x y thrust"
        print(str(next_checkpoint_x) + " " + str(next_checkpoint_y) + " " + str(thrust))
